# Cursor Rules for mdtasks Project

## Task Management Rules

### ‚úÖ REQUIRED: Use mdtasks for all task management
- **NEVER** create TODO comments in code files
- **NEVER** use GitHub issues for task tracking
- **ALWAYS** use `mdtasks add` to create new tasks
- **ALWAYS** use `mdtasks start <id>` when beginning work
- **ALWAYS** use `mdtasks done <id>` when completing work

### üìã Task Creation Workflow
1. **Create task**: `mdtasks add "Task description" --priority high --tags feature`
2. **Start work**: `mdtasks start <id>`
3. **Complete work**: `mdtasks done <id>`
4. **Track progress**: `mdtasks list --status active`

### üö´ Forbidden Patterns
```rust
// ‚ùå DON'T DO THIS - Use mdtasks instead
// TODO: Implement authentication
// FIXME: Fix the bug in user service
// HACK: Temporary workaround

// ‚úÖ DO THIS INSTEAD
// Create task: mdtasks add "Implement authentication" --priority high --tags auth
// Create task: mdtasks add "Fix user service bug" --priority high --tags bug
```

### üìä Required Commands Before Starting Work
```bash
# Check current tasks
mdtasks list

# Start working on a task
mdtasks start <id>

# Check what you're working on
mdtasks list --status active
```

### üìä Required Commands After Completing Work
```bash
# Mark task as done
mdtasks done <id>

# Verify completion
mdtasks list --status done
```

## Code Quality Rules

### Rust Standards
- Use `cargo fmt` before committing
- Use `cargo clippy` to check for warnings
- Add proper error handling with `anyhow::Result`
- Use descriptive variable names
- Add doc comments for public functions

### CLI Design Standards
- Use clap derive macros for argument parsing
- Provide helpful error messages
- Use consistent emoji for user feedback (‚úÖ, üöÄ, ‚ùå)
- Follow the pattern: `mdtasks <command> <args>`

### File Organization
- Keep all task files in `tasks/` directory
- Use consistent naming: `{id}-{kebab-case-title}.md`
- Maintain YAML front-matter structure
- Preserve markdown content when updating tasks

## Git Workflow Rules

### Commit Messages
- Use conventional commits: `feat:`, `fix:`, `docs:`, `refactor:`
- Include task ID in commit message when applicable
- Example: `feat: implement start command (task #4)`

### Branch Naming
- Use task-based branches: `task-{id}-{description}`
- Example: `task-005-implement-edit-command`

### Pre-commit Checks
```bash
# Before committing, run:
cargo fmt
cargo clippy
mdtasks list --status active  # Ensure no active tasks are forgotten
```

## Development Environment

### Required Setup
- Use `nix develop` for development environment
- Install mdtasks globally: `cargo install --path .`
- Configure editor to recognize `.md` task files

### Testing Requirements
- Test all new commands manually
- Verify task file format after updates
- Test filtering and status changes
- Ensure error handling works correctly

## Task Priority Guidelines

### High Priority
- Core functionality (add, list, show, done, start)
- Bug fixes
- Security issues

### Medium Priority
- Quality of life improvements
- Configuration options
- Additional commands

### Low Priority
- Nice-to-have features
- Advanced integrations
- Performance optimizations

## Documentation Requirements

### README Updates
- Update README.md when adding new commands
- Include usage examples
- Update feature list

### Task Documentation
- Each task should have clear acceptance criteria
- Include implementation notes
- Document any dependencies

## Enforcement

### Code Review Checklist
- [ ] No TODO/FIXME comments in code
- [ ] All work tracked in mdtasks
- [ ] Proper task lifecycle (start ‚Üí done)
- [ ] Commit messages follow conventions
- [ ] Code formatted and linted

### Daily Workflow
1. `mdtasks list` - Check current tasks
2. `mdtasks start <id>` - Begin work
3. Implement feature/fix
4. `mdtasks done <id>` - Complete work
5. Commit with proper message
6. `mdtasks list --status done` - Verify completion

## Examples

### ‚úÖ Good Task Management
```bash
# Creating a new feature
mdtasks add "Add configuration file support" --priority medium --tags config

# Starting work
mdtasks start 6

# Working on the feature...
# (implement code)

# Completing work
mdtasks done 6
```

### ‚ùå Bad Task Management
```rust
// DON'T DO THIS
fn main() {
    // TODO: Add error handling
    // FIXME: This is broken
    println!("Hello world");
}
```

### ‚úÖ Good Commit Messages
```
feat: implement start command (task #4)
fix: handle missing task files gracefully (task #12)
docs: update README with new commands
refactor: extract common task update logic
```

### ‚ùå Bad Commit Messages
```
wip
fixes
updates
changes
```
