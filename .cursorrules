# Cursor Rules for mdtasks Project

- use flake nix
- always use mdtasks for tracking tasks and progress

## 🚫 CRITICAL: No TODO/FIXME Comments
- **NEVER** create TODO/FIXME comments in code files
- **ALWAYS** use `mdtasks add` to create tasks instead
- **ALWAYS** use `mdtasks start <id>` when beginning work
- **ALWAYS** use `mdtasks done <id>` when completing work

## 🔧 Pre-Commit Requirements
**MANDATORY** before every commit:
```bash
cargo fmt                    # Format code
cargo clippy -- -D warnings # Check for warnings/errors
```

## 📋 Task Management Workflow
1. **Create**: `mdtasks add "Description" --priority high --tags feature`
2. **Start**: `mdtasks start <id>`
3. **Work**: Implement feature/fix
4. **Complete**: `mdtasks done <id>`
5. **Commit**: `git commit -m "feat: description (task #X)"`

## 🎯 Code Quality Standards
- Use `anyhow::Result` for error handling
- Add doc comments for public functions
- Use descriptive variable names
- Follow clap derive patterns for CLI
- Use consistent emoji feedback (✅, 🚀, ❌)

## 📝 Commit Message Format
- Use conventional commits: `feat:`, `fix:`, `docs:`, `refactor:`
- Include task ID: `feat: implement start command (task #4)`
- No generic messages like "wip", "fixes", "updates"

## 🚀 Development Setup
- Use `nix develop` for environment
- Install globally: `cargo install --path .`
- Test commands manually before committing

## ❌ Forbidden Patterns
```rust
// DON'T DO THIS
// TODO: Implement authentication
// FIXME: Fix the bug
// HACK: Temporary workaround

// DO THIS INSTEAD
// mdtasks add "Implement authentication" --priority high --tags auth
```

## ✅ Daily Workflow
1. `mdtasks list` - Check current tasks
2. `mdtasks start <id>` - Begin work
3. Implement feature
4. `cargo fmt && cargo clippy` - Format and lint
5. `mdtasks done <id>` - Complete work
6. `git commit -m "feat: description (task #X)"` - Commit
